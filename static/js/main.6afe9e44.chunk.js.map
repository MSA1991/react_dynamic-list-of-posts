{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/Error.ts","components/NewCommentForm.tsx","api/users.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","userPosts","handleSelectedPost","selectedPost","handleToggleSidebar","isOpenSidebar","_jsxs","children","_jsx","className","map","_ref2","id","title","isSelected","type","classNames","onClick","handlePostButtonClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","setPostComments","postComments","setError","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","comment","setComment","_useState7","_useState8","newId","setNewId","_useState9","_useState10","loading","setLoading","_useState11","_useState12","errorForm","setErrorForm","useEffect","allComments","maxId","Math","max","apply","_toConsumableArray","handleRemoveErrorForm","field","_objectSpread","_defineProperty","onSubmit","event","preventDefault","newComment","postId","concat","addComment","catch","Add","finally","htmlFor","placeholder","value","onChange","e","target","None","PostDetails","handleDeleteComment","isLoadingComments","error","openCommentForm","setOpenCommentForm","href","UserSelector","_users$find","users","selectedUserId","handleSelectedUser","openMenu","setOpenMenu","menuRef","useRef","selectedUserName","find","handleClick","current","contains","document","addEventListener","removeEventListener","handleToggleMenu","ref","role","_ref3","App","setUsers","setSelectedUserId","setUserPosts","isLoadingPost","setIsLoadingPost","setSelectedPost","_useState13","_useState14","setIsLoadingComments","_useState15","_useState16","setIsOpenSidebar","_useState17","_useState18","usersFromData","posts","UserPosts","comments","userId","newSelectedPost","status","commentId","newCommentList","filter","Delete","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6afe9e44.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  handleSelectedPost: (postId: number) => void;\n  selectedPost: Post | null;\n  handleToggleSidebar: (status?: boolean) => void;\n  isOpenSidebar: boolean;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  handleSelectedPost,\n  selectedPost,\n  handleToggleSidebar,\n  isOpenSidebar,\n}) => {\n  const handlePostButtonClick = (id: number) => {\n    if (selectedPost?.id === id) {\n      handleToggleSidebar();\n    } else {\n      handleSelectedPost(id);\n      handleToggleSidebar(true);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(({ id, title }) => {\n            const isSelected = selectedPost?.id === id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">\n                  {id}\n                </td>\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      {\n                        'is-light': !isSelected,\n                      },\n                    )}\n                    onClick={() => handlePostButtonClick(id)}\n                  >\n                    {isOpenSidebar && isSelected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Error {\n  None = '',\n  UserPosts = 'Unable to get a user posts',\n  Delete = 'Unable to delete comment',\n  Add = 'Unable to add new comment',\n}\n\nexport interface ErrorForm {\n  name: boolean,\n  email: boolean,\n  comment: boolean,\n}\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { addComment, getAllComment } from '../api/users';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Error, ErrorForm } from '../types/Error';\n\ntype Props = {\n  selectedPost: Post,\n  postComments: Comment[],\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setPostComments,\n  postComments,\n  setError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [newId, setNewId] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [errorForm, setErrorForm] = useState<ErrorForm>({\n    name: false,\n    email: false,\n    comment: false,\n  });\n\n  useEffect(() => {\n    getAllComment().then((allComments) => {\n      const maxId = Math.max(...allComments.map(({ id }) => id)) + 1;\n\n      setNewId(maxId);\n    });\n  }, [postComments]);\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setError(Error.None);\n    setErrorForm({\n      name: false,\n      email: false,\n      comment: false,\n    });\n  };\n\n  const handleAddComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setErrorForm({\n      name: !name,\n      email: !email,\n      comment: !comment,\n    });\n\n    if (!name || !email || !comment) {\n      return;\n    }\n\n    setLoading(true);\n\n    const newComment = {\n      id: newId,\n      postId: selectedPost.id,\n      body: comment,\n      name,\n      email,\n    };\n\n    addComment(selectedPost.id, newComment)\n      .then(() => {\n        setPostComments([...postComments, newComment]);\n      })\n      .catch(() => setError(Error.Add))\n      .finally(() => {\n        setComment('');\n        setLoading(false);\n      });\n  };\n\n  const handleRemoveErrorForm = (field: string) => {\n    setErrorForm({ ...errorForm, [field]: false });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errorForm.name,\n              },\n            )}\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n              handleRemoveErrorForm('name');\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorForm.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorForm.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errorForm.email,\n              },\n            )}\n            value={email}\n            onChange={(e) => {\n              setEmail(e.target.value);\n              handleRemoveErrorForm('email');\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorForm.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorForm.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': errorForm.comment,\n              },\n            )}\n            value={comment}\n            onChange={(e) => {\n              setComment(e.target.value);\n              handleRemoveErrorForm('comment');\n            }}\n          />\n        </div>\n\n        {errorForm.comment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': loading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getPostComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const getAllComment = () => {\n  return client.get<Comment[]>('/comments');\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (id: number, comment: Comment) => {\n  return client.post(`/comments?postId=${id}`, comment);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Error } from '../types/Error';\n\ntype Props = {\n  postComments: Comment[],\n  selectedPost: Post,\n  handleDeleteComment: (commntId: number) => void,\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  isLoadingComments: boolean,\n  error: Error,\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postComments,\n  selectedPost,\n  handleDeleteComment,\n  setPostComments,\n  isLoadingComments,\n  error,\n  setError,\n}) => {\n  const [openCommentForm, setOpenCommentForm] = useState(false);\n\n  useEffect(() => {\n    setOpenCommentForm(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && (\n            <Loader />\n          )}\n\n          {error !== Error.None && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {error}\n            </div>\n          )}\n\n          {(!postComments.length && !isLoadingComments) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(!!postComments.length && !isLoadingComments) && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {postComments.map(comment => {\n            const {\n              name,\n              body,\n              email,\n              id,\n            } = comment;\n\n            return (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={id}\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                    {name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {body}\n                </div>\n              </article>\n            );\n          })}\n\n          {(!openCommentForm && !isLoadingComments) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setOpenCommentForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {openCommentForm && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            postComments={postComments}\n            setPostComments={setPostComments}\n            setError={setError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUserId: number | null,\n  handleSelectedUser: (id: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  handleSelectedUser,\n}) => {\n  const [openMenu, setOpenMenu] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const selectedUserName = users.find(({ id }) => id === selectedUserId)?.name;\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setOpenMenu(false);\n      }\n    };\n\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  const handleToggleMenu = () => {\n    setOpenMenu(!openMenu);\n  };\n\n  return (\n    <div\n      ref={menuRef}\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        {\n          'is-active': openMenu,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleToggleMenu}\n        >\n          <span>\n            {!selectedUserId\n              ? 'Choose a user'\n              : selectedUserName}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(({ id, name }) => (\n            <a\n              key={id}\n              href={`#user-${id}`}\n              className={classNames(\n                'dropdown-item',\n                {\n                  'is-active': selectedUserId === id,\n                },\n              )}\n              onClick={() => {\n                handleSelectedUser(id);\n                handleToggleMenu();\n              }}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { Comment } from './types/Comment';\nimport { Error } from './types/Error';\nimport {\n  getUsers,\n  getUserPosts,\n  getPostComments,\n  deleteComment,\n} from './api/users';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoadingPost, setIsLoadingPost] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isOpenSidebar, setIsOpenSidebar] = useState(false);\n  const [error, setError] = useState<Error>(Error.None);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromData => setUsers(usersFromData));\n  }, []);\n\n  useEffect(() => {\n    setIsLoadingPost(true);\n\n    if (selectedUserId) {\n      setError(Error.None);\n\n      getUserPosts(selectedUserId)\n        .then(posts => setUserPosts(posts))\n        .catch(() => setError(Error.UserPosts))\n        .finally(() => setIsLoadingPost(false));\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoadingComments(true);\n\n      getPostComments(selectedPost.id)\n        .then(comments => setPostComments(comments))\n        .finally(() => setIsLoadingComments(false));\n    }\n  }, [selectedPost]);\n\n  const handleSelectedUser = (userId: number) => {\n    setSelectedUserId(userId);\n    setIsOpenSidebar(false);\n    setError(Error.None);\n\n    setSelectedPost(null);\n  };\n\n  const handleSelectedPost = (postId: number) => {\n    const newSelectedPost = userPosts.find(({ id }) => id === postId);\n\n    if (newSelectedPost) {\n      setSelectedPost(newSelectedPost);\n    }\n\n    setError(Error.None);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    setError(Error.None);\n\n    deleteComment(commentId)\n      .then(() => {\n        const newCommentList = postComments\n          .filter(({ id }) => id !== commentId);\n\n        setPostComments(newCommentList);\n      })\n      .catch(() => setError(Error.Delete));\n  };\n\n  const handleToggleSidebar = (status?: boolean) => {\n    if (status) {\n      setIsOpenSidebar(status);\n    } else {\n      setIsOpenSidebar(!isOpenSidebar);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  handleSelectedUser={handleSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {(isLoadingPost && selectedUserId) && (\n                  <Loader />\n                )}\n\n                {error === Error.UserPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n\n                {(!isLoadingPost && !userPosts.length && !error) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                ) }\n\n                {(!!userPosts.length && !isLoadingPost) && (\n                  <PostsList\n                    userPosts={userPosts}\n                    handleSelectedPost={handleSelectedPost}\n                    selectedPost={selectedPost}\n                    handleToggleSidebar={handleToggleSidebar}\n                    isOpenSidebar={isOpenSidebar}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': isOpenSidebar,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  postComments={postComments}\n                  selectedPost={selectedPost}\n                  handleDeleteComment={handleDeleteComment}\n                  setPostComments={setPostComments}\n                  isLoadingComments={isLoadingComments}\n                  error={error}\n                  setError={setError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}